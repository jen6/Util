#include <iostream>
#include <string>

using namespace std;

int make_pattern(int len, string &pat);
int find_legnth(string ret_addr, string pat);

int main(int argc, char * argv[])
{
	string pattern;
	int len;

	if(argc < 2)
	{
		cout << "usage : ./patfind -option -..." <<endl;
		cout << "option : (-m length)  make pattern\n (-f return addr)find buf length" <<endl;
		return 0;
	}

	if(string("-m") == argv[1])
	{
		make_pattern(atoi(argv[2]), pattern);
		cout << pattern << endl;
		return 0;
	}
	else if(string("-f") == argv[1])
	{
		make_pattern(520, pattern);
		len = find_legnth(argv[2], pattern);
		if(len == -1)
		{
			cout << "error" << endl;
			return 1;
		}
		cout << "find! buf to addr is " << len << endl;
		return 0;
	}
	else
	{
		cout << "not vaild option" << endl;
		cout << "usage : ./patfind -option -..." <<endl;
                cout << "option : -m [length]  make pattern\n -f [return addr(like 41414141)] find buf length" <<endl;
                return 0;
	}

	

}

int make_pattern(int len, string &pat)
{
	const string abc = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	const string num = "1234567890";
	pat = "";
	while(len)
	{
		for(auto i : num)
		{
			for(auto j : abc)
			{
				if(!len)
					break;
				pat += j;
				pat += i;
				--len;
			}
			if(!len)
				break;
		}
	}
	return 0;

}

int find_legnth(string ret_addr, string pat)
{
	int indx;
	long it;
	if(ret_addr.length() != 8)
		return -1;
	string buf;
	it = strtoul(ret_addr.c_str(), 0, 16);
	for(int i = 0; i < 4; i ++)
	{
		buf += it % 256;
		it = it /256;
	}
	if(pat.find(buf) != string::npos)
	{
		indx = pat.find(buf);	
	}
	else
	{
		return -1;
	}
	return indx;	
}
		
